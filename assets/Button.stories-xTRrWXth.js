import{R as z}from"./index-BpYrhlGc.js";function M(e){var a,t,r="";if(typeof e=="string"||typeof e=="number")r+=e;else if(typeof e=="object")if(Array.isArray(e)){var i=e.length;for(a=0;a<i;a++)e[a]&&(t=M(e[a]))&&(r&&(r+=" "),r+=t)}else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function L(){for(var e,a,t=0,r="",i=arguments.length;t<i;t++)(e=arguments[t])&&(a=M(e))&&(r&&(r+=" "),r+=a);return r}const T="_buttonContainer_y378p_1",x="_small_y378p_33",E="_medium_y378p_38",N="_large_y378p_43",c={buttonContainer:T,small:x,medium:E,large:N},u=({children:e,className:a="",size:t="medium",...r})=>z.createElement("button",{className:L(c.buttonContainer,c[t],a),...r},e);u.__docgenInfo={description:`Button компонент для повторного использования элементов пользовательского интерфейса.
@param {React.ReactNode} children - Содержимое, отображаемое внутри кнопки.
@param {string} [className] - Дополнительные классы CSS для стилизации.
@param {'small' | 'medium' | 'large'} [size='medium'] - Размер кнопки.
@param {ButtonHTMLAttributes<HTMLButtonElement>} props - Дополнительные атрибуты кнопок.
@returns {JSX.Element} Стилизованный компонент кнопки.
@example
// Пример использования:
import {Button} from "goncharov-ui/Button";
<Button size="large" onClick={() => console.log('Clicked!')}>
  Click Me
</Button>`,methods:[],displayName:"Button",props:{className:{required:!1,tsType:{name:"string"},description:"Дополнительные CSS классы для кнопки.",defaultValue:{value:"''",computed:!1}},size:{required:!1,tsType:{name:"union",raw:"'small' | 'medium' | 'large'",elements:[{name:"literal",value:"'small'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'large'"}]},description:"Размер кнопки: small, medium или large.",defaultValue:{value:"'medium'",computed:!1}}},composes:["ButtonHTMLAttributes"]};const A={title:"components/Button",component:u,args:{children:"Click me",disabled:!1,size:"medium"},parameters:{controls:{exclude:[]}}},m=e=>z.createElement(u,{...e}),s=m.bind({});s.args={size:"small",children:"Small Button"};const o=m.bind({});o.args={size:"medium",children:"Medium Button"};const n=m.bind({});n.args={size:"large",children:"Large Button"};const l=m.bind({});l.args={disabled:!0,children:"Disabled Button"};var d,p,g;s.parameters={...s.parameters,docs:{...(d=s.parameters)==null?void 0:d.docs,source:{originalSource:"args => <Button {...args} />",...(g=(p=s.parameters)==null?void 0:p.docs)==null?void 0:g.source}}};var f,B,b;o.parameters={...o.parameters,docs:{...(f=o.parameters)==null?void 0:f.docs,source:{originalSource:"args => <Button {...args} />",...(b=(B=o.parameters)==null?void 0:B.docs)==null?void 0:b.source}}};var _,y,S;n.parameters={...n.parameters,docs:{...(_=n.parameters)==null?void 0:_.docs,source:{originalSource:"args => <Button {...args} />",...(S=(y=n.parameters)==null?void 0:y.docs)==null?void 0:S.source}}};var h,C,v;l.parameters={...l.parameters,docs:{...(h=l.parameters)==null?void 0:h.docs,source:{originalSource:"args => <Button {...args} />",...(v=(C=l.parameters)==null?void 0:C.docs)==null?void 0:v.source}}};const R=["Small","Medium","Large","Disabled"];export{l as Disabled,n as Large,o as Medium,s as Small,R as __namedExportsOrder,A as default};
